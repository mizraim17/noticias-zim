{"version":3,"sources":["Component/News.js","App.js","serviceWorker.js","index.js"],"names":["News","props","react_default","a","createElement","lib","className","header","responsive","image","note","urlToImage","width","blue-text","title","actions","href","url","content","App","state","word","news","today","todayy","consumirAPi","newsapi","require","v2","topHeadlines","q","language","then","response","console","log","everything","sources","domains","from","to","sortBy","page","category","country","findBySubject","_this$state","_this","articles","setState","wordSearch","e","target","value","newsDay","_this$state2","newsToday","this","Date","_this$state3","m","placeholder","onChange","iconn","onClick","map","el","i","Component_News","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.df2774a6.chunk.js","sourcesContent":["import React from 'react'\nimport {Card ,CardTitle} from 'react-materialize'\n\n\nconst News= (props) => {\n  return(\n    <Card className='large'\n          header={\n            <CardTitle responsive=\"true\" image={props.note.urlToImage} width=\"100\" blue-text=\"true\" >\n\n              {props.note.title}\n            </CardTitle>}\n          actions={[<a href={props.note.url}>Noticia Completa</a>]}>\n      <p >{props.note.content}</p>\n    </Card>\n\n  );\n}\n\nexport default News","import React, { Component } from 'react';\nimport {Button, Col, Icon, Input, Row} from 'react-materialize'\nimport './App.css';\nimport News from \"./Component/News\";\n\nimport Moment from 'react-moment'\n\nclass App extends Component {\n  state={\n    word:\"\",\n    news:[],\n    today:\"\",\n    todayy:\"\"\n  }\n  consumirAPi = () => {\n    const NewsAPI = require('newsapi');\n    const newsapi = new NewsAPI('4891f314d6264426978f471d75136fd1');\n// To query /v2/top-headlines\n// All options passed to topHeadlines are optional, but you need to include at least one of them\n    newsapi.v2.topHeadlines({\n      // sources: 'bbc-news',\n       q: 'economia',\n      //  category: 'business',\n        language: 'es',\n      // country: 'mx'\n    }).then(response => {\n      console.log('germany',response)\n      /*\n        {\n          status: \"ok\",\n          articles: [...]\n        }\n      */\n    });\n// To query /v2/everything\n// You must include at least one q, source, or domain\n    newsapi.v2.everything({\n      q: 'bitcoin',\n      sources: 'bbc-news,the-verge',\n      domains: 'bbc.co.uk, techcrunch.com',\n      from: '2019-04-20',\n      to: '2019-02-20',\n      language: 'en',\n      sortBy: 'relevancy',\n      page: 2\n    })\n      .then(response => {\n        console.log(response);\n\n      });\n// To query sources\n// All options are optional\n    newsapi.v2.sources({\n      category: 'technology',\n      language: 'en',\n      country: 'us'\n    }).then(response => {\n      console.log(response);\n      /*\n        {\n          status: \"ok\",\n          sources: [...]\n        }\n      */\n    });\n  }\n\n  findBySubject = () =>{\n    const NewsAPI = require('newsapi');\n    const newsapi = new NewsAPI('4891f314d6264426978f471d75136fd1');\n\n    let {word,news}= this.state;\n    newsapi.v2.everything({\n      q: word\n       // language:'es'\n\n    })\n      .then(response => {\n        console.log(response);\n        news=response.articles;\n        this.setState({news})\n      });\n  }\n\n  wordSearch= (e) => {\n    let {word}=this.state;\n    word=e.target.value;\n    console.log(word)\n    this.setState({word})\n  }\n  \n  newsDay = ()=> {\n    const NewsAPI = require('newsapi');\n    const newsapi = new NewsAPI('4891f314d6264426978f471d75136fd1');\n    let {today,newsToday} = this.state;\n    \n    newsapi.v2.everything({\n    q:'tecnologÃ­a',\n    language: 'es',\n    sortBy: 'publishedAt',\n    page: 1\n  })\n  \n  .then(response => {\n    console.log('response-----',response);\n    newsToday=response.articles;\n    this.setState({newsToday})\n  });\n}\n  \n  componentWillMount() {\n    let {today}=this.state;\n    today=Date()\n    if(today!==''){\n      this.setState({today})\n      console.log('today willmount',today)\n    }\n  }\n \n  componentDidMount() {\n    this.newsDay()\n  }\n  \n  render() {\n    let {news,newsToday} = this.state;\n    return (\n      <div>\n        <Row>\n          <Col m={9}>\n            <Input  placeholder=\"Search News\" onChange={this.wordSearch} iconn=\"find_in_page\" />\n              <br/>\n            <Button onClick={this.findBySubject} >consumir</Button>\n          </Col>\n        </Row>\n        <Row>\n          <Col m={9}>\n            {\n              news.map((el,i)=>{\n                return(\n                  <News\n                    note={el}\n                    key={i}\n                  />\n                )\n              })\n            }\n          </Col>\n        </Row>\n        {\n          newsToday?\n            <Row>\n              <Col m={9}>\n                {\n                  newsToday.map((el,i)=>{\n                    return(\n                      <News\n                        note={el}\n                        key={i}\n                      />\n                    )\n                  })\n                }\n              </Col>\n            </Row>\n            :\n            ''\n        }\n       \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'News content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}