{"version":3,"sources":["Component/News.js","App.js","serviceWorker.js","index.js"],"names":["News","props","react_default","a","createElement","href","note","url","console","log","urlToImage","lib","className","header","responsive","image","width","blue-text","title","content","App","state","word","news","today","consumirAPi","newsapi","require","v2","topHeadlines","q","language","then","response","everything","sources","domains","from","to","sortBy","page","category","country","findBySubject","_this$state","_this","articles","setState","topicBybutton","e","target","value","wordSearch","newsDay","newsToday","this","Date","_this$state2","m","placeholder","onChange","onClick","icon","map","el","i","Component_News","key","no","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mNAyBeA,UArBH,SAACC,GACX,OACEC,EAAAC,EAAAC,cAAA,KAAGC,KAAMJ,EAAMK,KAAKC,KAAMC,QAAQC,IAAI,cAAWR,EAAMK,KAAKI,YAC1DR,EAAAC,EAAAC,cAACO,EAAA,KAAD,CAAMC,UAAU,QACVC,OACEX,EAAAC,EAAAC,cAACO,EAAA,UAAD,CAAWG,WAAW,OAAOC,MAAOd,EAAMK,KAAKI,WAAYM,MAAM,MAAMC,YAAU,QAC/Ef,EAAAC,EAAAC,cAAA,KAAGQ,UAAU,WAEXX,EAAMK,KAAKY,SAMrBhB,EAAAC,EAAAC,cAAA,SAAKH,EAAMK,KAAKa,aC6KTC,6MAzLbC,MAAM,CACJC,KAAK,GACLC,KAAK,GACLC,MAAM,MAGRC,YAAc,WACZ,IACMC,EAAU,IADAC,EAAQ,IACR,CAAY,oCAG5BD,EAAQE,GAAGC,aAAa,CAErBC,EAAG,WAEFC,SAAU,OAEXC,KAAK,SAAAC,GACNzB,QAAQC,IAAI,UAAUwB,KAUxBP,EAAQE,GAAGM,WAAW,CACpBJ,EAAG,UACHK,QAAS,qBACTC,QAAS,4BACTC,KAAM,aACNC,GAAI,aACJP,SAAU,KACVQ,OAAQ,sBACRC,KAAM,IAELR,KAAK,SAAAC,GACJzB,QAAQC,IAAIwB,KAKhBP,EAAQE,GAAGO,QAAQ,CACjBM,SAAU,aACVV,SAAU,KACVW,QAAS,OACRV,KAAK,SAAAC,GACNzB,QAAQC,IAAIwB,QAKhBU,cAAgB,WACd,IACMjB,EAAU,IADAC,EAAQ,IACR,CAAY,oCAFTiB,EAIFC,EAAKxB,MAAjBC,EAJcsB,EAIdtB,KAAKC,EAJSqB,EAITrB,KACVG,EAAQE,GAAGM,WAAW,CACpBJ,EAAGR,IAEFU,KAAK,SAAAC,GACJzB,QAAQC,IAAIwB,GACZV,EAAKU,EAASa,SACdD,EAAKE,SAAS,CAACxB,cAIrByB,cAAgB,SAACC,GACfzC,QAAQC,IAAI,SAASwC,EAAEC,OAAOC,OAC9B,IAAI7B,EAAK2B,EAAEC,OAAOC,MAGZzB,EAAU,IADAC,EAAQ,IACR,CAAY,oCAEvBJ,EAAOsB,EAAKxB,MAAZE,KACLG,EAAQE,GAAGM,WAAW,CACpBJ,EAAGR,IAEJU,KAAK,SAAAC,GACJzB,QAAQC,IAAIwB,GACZV,EAAKU,EAASa,SACdD,EAAKE,SAAS,CAACxB,cAInB6B,WAAY,SAACH,GACXJ,EAAKE,SAAS,CAACzB,KAAK2B,EAAEC,OAAOC,WAG/BE,QAAU,WACR,IACM3B,EAAU,IADAC,EAAQ,IACR,CAAY,oCACvB2B,EAAaT,EAAKxB,MAAlBiC,UAEL5B,EAAQE,GAAGM,WAAW,CACtBJ,EAAE,OACFC,SAAU,KACVQ,OAAQ,cACRC,KAAM,IAGPR,KAAK,SAAAC,GACJzB,QAAQC,IAAI,gBAAgBwB,GAC5BqB,EAAUrB,EAASa,SACnBD,EAAKE,SAAS,CAACO,qGAII,IACd9B,EAAO+B,KAAKlC,MAAZG,MAEM,MADXA,EAAMgC,UAEJD,KAAKR,SAAS,CAACvB,UACfhB,QAAQC,IAAI,kBAAkBe,gDAOhC+B,KAAKF,2CAGE,IAAAI,EACgBF,KAAKlC,MAAvBE,EADEkC,EACFlC,KAAK+B,EADHG,EACGH,UACV,OACEpD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACO,EAAA,IAAD,KACET,EAAAC,EAAAC,cAACO,EAAA,IAAD,CAAK+C,EAAG,GACNxD,EAAAC,EAAAC,cAACO,EAAA,MAAD,CACEgD,YAAY,WACZC,SAAUL,KAAKH,aAEflD,EAAAC,EAAAC,cAAA,WACFF,EAAAC,EAAAC,cAACO,EAAA,OAAD,CAAQkD,QAASN,KAAKZ,cAAemB,KAAK,gBAA1C,WAEF5D,EAAAC,EAAAC,cAACO,EAAA,IAAD,CAAK+C,EAAG,GACNxD,EAAAC,EAAAC,cAACO,EAAA,OAAD,CAAQkD,QAASN,KAAKP,cAAec,KAAK,aAAaX,MAAM,cAA7D,cACAjD,EAAAC,EAAAC,cAACO,EAAA,OAAD,CAAQkD,QAASN,KAAKP,cAAec,KAAK,UAAUX,MAAM,oBAA1D,MACAjD,EAAAC,EAAAC,cAACO,EAAA,OAAD,CAAQkD,QAASN,KAAKP,cAAec,KAAK,aAAaX,MAAM,eAA7D,iBAGJjD,EAAAC,EAAAC,cAACO,EAAA,IAAD,KACET,EAAAC,EAAAC,cAACO,EAAA,IAAD,CAAK+C,EAAG,GAEJnC,EAAKwC,IAAI,SAACC,EAAGC,GACX,OACE/D,EAAAC,EAAAC,cAAC8D,EAAD,CACE5D,KAAM0D,EACNG,IAAKF,QASfX,EACEpD,EAAAC,EAAAC,cAACO,EAAA,IAAD,KACET,EAAAC,EAAAC,cAACO,EAAA,IAAD,CAAK+C,EAAG,GAEJJ,EAAUS,IAAI,SAACC,EAAGC,GAChB,OACE/D,EAAAC,EAAAC,cAAC8D,EAAD,CACE5D,KAAM0D,EACNG,IAAKF,EACLG,GAAIH,QAQhB,WAlLMI,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1E,EAAAC,EAAAC,cAACyE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlD,KAAK,SAAAmD,GACjCA,EAAaC","file":"static/js/main.46ebe6b0.chunk.js","sourcesContent":["import React from 'react'\nimport {Card ,CardTitle} from 'react-materialize'\n\n\nconst News= (props) => {\n  return(\n    <a href={props.note.url}>{console.log('keys--->',props.note.urlToImage)}\n      <Card className='large'\n            header={\n              <CardTitle responsive=\"true\" image={props.note.urlToImage} width=\"100\" blue-text=\"true\" >\n                <p className=\"txt-tit\">\n                {\n                  props.note.title\n                }\n                </p>\n              </CardTitle>\n            }\n      >\n        <p >{props.note.content}</p>\n      </Card>\n    </a>\n\n  );\n}\n\nexport default News","import React, { Component } from 'react';\nimport {Button, Col,  Input, Row} from 'react-materialize'\nimport './App.css';\nimport News from \"./Component/News\";\n\nclass App extends Component {\n  state={\n    word:\"\",\n    news:[],\n    today:\"\"\n  }\n  \n  consumirAPi = () => {\n    const NewsAPI = require('newsapi');\n    const newsapi = new NewsAPI('4891f314d6264426978f471d75136fd1');\n// To query /v2/top-headlines\n// All options passed to topHeadlines are optional, but you need to include at least one of them\n    newsapi.v2.topHeadlines({\n      // sources: 'bbc-news',\n       q: 'economia',\n      //  category: 'business',\n        language: 'es',\n      // country: 'mx'\n    }).then(response => {\n      console.log('germany',response)\n      /*\n        {\n          status: \"ok\",\n          articles: [...]\n        }\n      */\n    });\n// To query /v2/everything\n// You must include at least one q, source, or domain\n    newsapi.v2.everything({\n      q: 'bitcoin',\n      sources: 'bbc-news,the-verge',\n      domains: 'bbc.co.uk, techcrunch.com',\n      from: '2019-04-20',\n      to: '2019-02-20',\n      language: 'en',\n      sortBy: 'relevanwordSearchcy',\n      page: 2\n    })\n      .then(response => {\n        console.log(response);\n\n      });\n// To query sources\n// All options are optional\n    newsapi.v2.sources({\n      category: 'technology',\n      language: 'en',\n      country: 'us'\n    }).then(response => {\n      console.log(response);\n      \n    });\n  }\n\n  findBySubject = () =>{\n    const NewsAPI = require('newsapi');\n    const newsapi = new NewsAPI('4891f314d6264426978f471d75136fd1');\n\n    let {word,news}= this.state;\n    newsapi.v2.everything({\n      q: word\n    })\n      .then(response => {\n        console.log(response);\n        news=response.articles;\n        this.setState({news})\n      });\n  }\n\n  topicBybutton = (e) =>{\n    console.log('evento',e.target.value);\n    let word=e.target.value;\n\n    const NewsAPI = require('newsapi');\n    const newsapi = new NewsAPI('4891f314d6264426978f471d75136fd1');\n\n    let {news}= this.state;\n    newsapi.v2.everything({\n      q: word\n    })\n    .then(response => {\n      console.log(response);\n      news=response.articles;\n      this.setState({news})\n    });\n  }\n\n  wordSearch= (e) => {\n    this.setState({word:e.target.value})\n  }\n  \n  newsDay = ()=> {\n    const NewsAPI = require('newsapi');\n    const newsapi = new NewsAPI('4891f314d6264426978f471d75136fd1');\n    let {newsToday} = this.state;\n    \n    newsapi.v2.everything({\n    q:'cdmx',\n    language: 'es',\n    sortBy: 'publishedAt',\n    page: 3\n  })\n  \n  .then(response => {\n    console.log('response-----',response);\n    newsToday=response.articles;\n    this.setState({newsToday})\n  });\n}\n  \n  componentWillMount() {\n    let {today}=this.state;\n    today=Date()\n    if(today!==''){\n      this.setState({today})\n      console.log('today willmount',today)\n    }\n  }\n\n\n\n  componentDidMount() {\n    this.newsDay()\n  }\n  \n  render() {\n    let {news,newsToday} = this.state;\n    return (\n      <div>\n        <Row>\n          <Col m={6}  >\n            <Input\n              placeholder=\"Keywords\"\n              onChange={this.wordSearch}\n              />\n              <br/>\n            <Button onClick={this.findBySubject} icon=\"find_in_page\"  >Search</Button>\n          </Col>\n          <Col m={6}  >\n            <Button onClick={this.topicBybutton} icon=\"laptop_mac\" value=\"Technology\"  >Technology</Button>\n            <Button onClick={this.topicBybutton} icon=\"near_me\" value=\"ciudad de mexico\" >DF</Button>\n            <Button onClick={this.topicBybutton} icon=\"motorcycle\" value=\"Motorcycle \" >Motorcycle </Button>\n          </Col>\n        </Row>\n        <Row>\n          <Col m={9}>\n            {\n              news.map((el,i)=>{\n                return(\n                  <News\n                    note={el}\n                    key={i}\n\n                  />\n                )\n              })\n            }\n          </Col>\n        </Row>\n        {\n          newsToday?\n            <Row>\n              <Col m={9}>\n                {\n                  newsToday.map((el,i)=>{\n                    return(\n                      <News\n                        note={el}\n                        key={i}\n                        no={i}\n                      />\n                    )\n                  })\n                }\n              </Col>\n            </Row>\n            :\n            ''\n        }\n       \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'News content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}